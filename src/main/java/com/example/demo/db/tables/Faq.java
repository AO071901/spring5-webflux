/*
 * This file is generated by jOOQ.
*/
package com.example.demo.db.tables;


import com.example.demo.db.Keys;
import com.example.demo.db.Spring;
import com.example.demo.db.tables.records.FaqRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Faq extends TableImpl<FaqRecord> {

    private static final long serialVersionUID = -611831549;

    /**
     * The reference instance of <code>spring.faq</code>
     */
    public static final Faq FAQ = new Faq();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FaqRecord> getRecordType() {
        return FaqRecord.class;
    }

    /**
     * The column <code>spring.faq.faq_id</code>.
     */
    public final TableField<FaqRecord, Integer> FAQ_ID = createField("faq_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('faq_faq_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>spring.faq.title</code>.
     */
    public final TableField<FaqRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>spring.faq.question</code>.
     */
    public final TableField<FaqRecord, String> QUESTION = createField("question", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>spring.faq.answer</code>.
     */
    public final TableField<FaqRecord, String> ANSWER = createField("answer", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>spring.faq.version</code>.
     */
    public final TableField<FaqRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>spring.faq.updated_time</code>.
     */
    public final TableField<FaqRecord, Timestamp> UPDATED_TIME = createField("updated_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>spring.faq.created_time</code>.
     */
    public final TableField<FaqRecord, Timestamp> CREATED_TIME = createField("created_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>spring.faq</code> table reference
     */
    public Faq() {
        this(DSL.name("faq"), null);
    }

    /**
     * Create an aliased <code>spring.faq</code> table reference
     */
    public Faq(String alias) {
        this(DSL.name(alias), FAQ);
    }

    /**
     * Create an aliased <code>spring.faq</code> table reference
     */
    public Faq(Name alias) {
        this(alias, FAQ);
    }

    private Faq(Name alias, Table<FaqRecord> aliased) {
        this(alias, aliased, null);
    }

    private Faq(Name alias, Table<FaqRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Spring.SPRING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FaqRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FAQ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FaqRecord> getPrimaryKey() {
        return Keys.PK_T_FAQ;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FaqRecord>> getKeys() {
        return Arrays.<UniqueKey<FaqRecord>>asList(Keys.PK_T_FAQ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Faq as(String alias) {
        return new Faq(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Faq as(Name alias) {
        return new Faq(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Faq rename(String name) {
        return new Faq(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Faq rename(Name name) {
        return new Faq(name, null);
    }
}
