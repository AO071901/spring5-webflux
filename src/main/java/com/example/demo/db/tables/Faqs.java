/*
 * This file is generated by jOOQ.
*/
package com.example.demo.db.tables;


import com.example.demo.db.Indexes;
import com.example.demo.db.Keys;
import com.example.demo.db.Public;
import com.example.demo.db.tables.records.FaqsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Faqs extends TableImpl<FaqsRecord> {

    private static final long serialVersionUID = -561770397;

    /**
     * The reference instance of <code>public.faqs</code>
     */
    public static final Faqs FAQS = new Faqs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FaqsRecord> getRecordType() {
        return FaqsRecord.class;
    }

    /**
     * The column <code>public.faqs.id</code>.
     */
    public final TableField<FaqsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('faqs_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.faqs.title</code>.
     */
    public final TableField<FaqsRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.faqs.content</code>.
     */
    public final TableField<FaqsRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.faqs.version</code>.
     */
    public final TableField<FaqsRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.faqs.updated_time</code>.
     */
    public final TableField<FaqsRecord, Timestamp> UPDATED_TIME = createField("updated_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.faqs.created_time</code>.
     */
    public final TableField<FaqsRecord, Timestamp> CREATED_TIME = createField("created_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>public.faqs</code> table reference
     */
    public Faqs() {
        this(DSL.name("faqs"), null);
    }

    /**
     * Create an aliased <code>public.faqs</code> table reference
     */
    public Faqs(String alias) {
        this(DSL.name(alias), FAQS);
    }

    /**
     * Create an aliased <code>public.faqs</code> table reference
     */
    public Faqs(Name alias) {
        this(alias, FAQS);
    }

    private Faqs(Name alias, Table<FaqsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Faqs(Name alias, Table<FaqsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FAQS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FaqsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FAQS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FaqsRecord> getPrimaryKey() {
        return Keys.FAQS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FaqsRecord>> getKeys() {
        return Arrays.<UniqueKey<FaqsRecord>>asList(Keys.FAQS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Faqs as(String alias) {
        return new Faqs(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Faqs as(Name alias) {
        return new Faqs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Faqs rename(String name) {
        return new Faqs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Faqs rename(Name name) {
        return new Faqs(name, null);
    }
}
